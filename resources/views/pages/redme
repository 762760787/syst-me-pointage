@extends('layouts.app')

@section('title', 'Scanner de Pointage')

@section('content')
<div class="bg-white p-6 rounded-lg shadow-lg max-w-2xl mx-auto text-center">
    <h1 class="text-2xl font-bold mb-4">Scanner de Pointage</h1>
    <p class="text-gray-600 mb-6">Veuillez pr√©senter votre badge QR Code devant la cam√©ra.</p>

    <div class="w-full max-w-sm mx-auto bg-gray-200 rounded-lg overflow-hidden border-4 border-gray-300">
        <div id="reader" class="w-full"></div>
    </div>

    <div id="scan-status" class="mt-4 text-lg font-semibold h-8"></div>
</div>


<!-- Modal de Confirmation -->
<div id="confirmation-modal" class="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center hidden z-50">
    <div class="bg-white p-8 rounded-lg shadow-2xl text-center transform transition-all scale-95 opacity-0" id="modal-content">
        <img id="employee-photo" src="" alt="Photo de l'employ√©" class="w-32 h-32 rounded-full mx-auto mb-4 border-4 border-gray-200 object-cover">
        <h2 id="employee-name" class="text-3xl font-bold text-gray-800"></h2>
        <p id="attendance-type" class="text-2xl mt-2"></p>
        <p id="attendance-time" class="text-lg text-gray-500 mt-1"></p>
    </div>
</div>

@endsection

@push('scripts')
{{-- La biblioth√®que html5-qrcode pour le scan --}}
<script src="https://unpkg.com/html5-qrcode" type="text/javascript"></script>

<script>
document.addEventListener('DOMContentLoaded', () => {
    // Axios est configur√© pour envoyer automatiquement le jeton de s√©curit√© (CSRF)
    // qui a √©t√© plac√© dans le gabarit layouts/app.blade.php
    axios.defaults.headers.common['X-CSRF-TOKEN'] = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

    const statusElement = document.getElementById('scan-status');
    const modal = document.getElementById('confirmation-modal');
    const modalContent = document.getElementById('modal-content');

    const appState = {
        scanner: null,
        lastScanTime: 0,
        // --- OPTIMISATION 1 ---
        // Cooldown r√©duit √† 3 secondes pour permettre un pointage plus rapide
        // entre diff√©rentes personnes, tout en √©vitant les doubles scans accidentels.
        scanCooldown: 3000,
    };

    function startScanner() {
        // Pour plus d'options de configuration, voir la documentation de la biblioth√®que :
        // https://github.com/mebjas/html5-qrcode
        appState.scanner = new Html5Qrcode("reader", {
            verbose: false // Mettre √† `true` pour le d√©bogage
        });

        // Configuration optimis√©e du scanner
        const qrScannerConfig = {
            // --- OPTIMISATION 2 ---
            // Augmentation des FPS (images par seconde) de 10 √† 25.
            // Le scanner analyse plus d'images par seconde, r√©sultant en une
            // d√©tection de QR code beaucoup plus rapide.
            // Attention : une valeur trop √©lev√©e peut impacter les performances sur d'anciens appareils.
            fps: 25,

            // La "qrbox" d√©finit la zone de scan. Une zone bien d√©finie aide la biblioth√®que
            // √† se concentrer et √† d√©coder plus vite. La taille de 70% est un bon compromis.
            qrbox: (viewfinderWidth, viewfinderHeight) => {
                const size = Math.floor(Math.min(viewfinderWidth, viewfinderHeight) * 0.7);
                return {
                    width: size,
                    height: size
                };
            },

            // --- OPTIMISATION 3 ---
            // Utilise les capacit√©s natives du navigateur pour la d√©tection de codes-barres
            // si elles sont disponibles, ce qui peut grandement acc√©l√©rer la reconnaissance.
            experimentalFeatures: {
                useBarCodeDetectorIfSupported: true
            },
        };


        statusElement.textContent = "D√©marrage de la cam√©ra...";
        // D√©marrage du scanner avec la nouvelle configuration
        appState.scanner.start(
            { facingMode: "environment" }, // Cam√©ra arri√®re par d√©faut
            qrScannerConfig,
            onScanSuccess, // Fonction appel√©e en cas de succ√®s
            (errorMessage) => { /* Ne rien faire si aucun QR code n'est trouv√© */ }
        ).then(() => {
             statusElement.textContent = "Pr√™t √† scanner";
        }).catch(err => {
            console.error("Erreur de d√©marrage du scanner.", err);
            statusElement.textContent = "Erreur: Cam√©ra non trouv√©e.";
            statusElement.classList.add('text-red-500');
        });
    }

    async function onScanSuccess(decodedText) {
        const now = Date.now();
        if (now - appState.lastScanTime < appState.scanCooldown) {
            return; // Sortir si le cooldown n'est pas termin√©
        }

        appState.lastScanTime = now;
        statusElement.textContent = "Code d√©tect√©, traitement...";

        try {
            const response = await axios.post("{{ route('web.attendance.store') }}", {
                qrcode_id: decodedText
            });
            showConfirmation(response.data);
        } catch (error) {
            let errorMessage = 'Une erreur est survenue.';
            if (error.response && error.response.data && error.response.data.message) {
                errorMessage = error.response.data.message;
            }
            console.error('Erreur de pointage:', error);
            showError(errorMessage);
        }
    }

    function showConfirmation(data) {
        document.getElementById('employee-photo').src = data.employee.photo_url;
        document.getElementById('employee-name').textContent = `${data.employee.prenom} ${data.employee.nom}`;
        const attendanceType = document.getElementById('attendance-type');

        if(data.attendance.type === 'Arriv√©e') {
            attendanceType.textContent = 'Arriv√©e ‚úÖ';
            attendanceType.className = 'text-2xl mt-2 text-green-600 font-semibold';
        } else {
            attendanceType.textContent = 'D√©part üö™';
            attendanceType.className = 'text-2xl mt-2 text-red-600 font-semibold';
        }

        const time = new Date(data.attendance.timestamp).toLocaleTimeString('fr-FR');
        document.getElementById('attendance-time').textContent = `Enregistr√© √† ${time}`;

        modal.classList.remove('hidden');
        setTimeout(() => modalContent.classList.remove('scale-95', 'opacity-0'), 10);

        setTimeout(() => {
            modalContent.classList.add('scale-95', 'opacity-0');
            setTimeout(() => modal.classList.add('hidden'), 300);
            statusElement.textContent = "Pr√™t √† scanner";
        }, 4000);
    }

    function showError(message) {
        statusElement.textContent = message;
        statusElement.classList.add('text-red-500');

        setTimeout(() => {
            statusElement.textContent = "Pr√™t √† scanner";
            statusElement.classList.remove('text-red-500');
        }, 4000);
    }

    startScanner();
});
</script>
@endpush
